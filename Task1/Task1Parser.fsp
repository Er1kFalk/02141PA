// Open the file that defines the type "expr" we shall use as AST
%{
open Task1TypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token TIMES DIV PLUS MINUS UMINUS POW 
%token LPAR RPAR ASSIGN SKIP COMMANDLIST 
%token BFUNCTION TWOGUARD DAND AND DOR OR 
%token NOTEQUAL NOT EQUAL GEQ GT LEQ LT EOF
%token LSQPAR RSQPAR TRUE FALSE
%token IF FI DO OD
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right LSQPAR RSQPAR COMMANDLIST TWOGUARD

%left PLUS MINUS
%left TIMES DIV
%right POW
%left UMINUS

%left DOR OR
%left AND DAND
%left NOT


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <command> start
%type <aexpr> expression
%type <command> command
%type <guard> guardedCommand
%type <b> boolean

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
expression:
  | expression TIMES expression   { TimesExpr($1,$3) }
  | expression DIV expression     { DivExpr($1,$3) }
  | expression PLUS expression    { PlusExpr($1,$3) }
  | MINUS expression              { UMinusExpr($2) }
  | expression MINUS expression   { MinusExpr($1,$3) }
  | expression POW expression     { PowExpr($1,$3) }
  | PLUS expression               { UPlusExpr($2) }
  | NUM                           { Num($1) }
  | VAR							  { X($1)}
  | LPAR expression RPAR          { $2 }

guardedCommand:
  | boolean BFUNCTION command				{Bfunc($1, $3)}
  | guardedCommand TWOGUARD guardedCommand  {Twoguard($1, $3)}

command:
  | VAR ASSIGN expression							{Assign($1,$3)}
  | VAR LSQPAR expression RSQPAR ASSIGN expression  {AssignArr($1, $3, $6)}
  | SKIP											{Skip}
  | command COMMANDLIST command						{CommandList($1,$3)}
  | IF guardedCommand FI							{Ifstate($2)}
  | DO guardedCommand OD							{Dostate($2)}

boolean:
  | TRUE							{True}
  | FALSE							{False}
  | boolean AND boolean				{And($1, $3)}
  | boolean DAND boolean			{And($1, $3)}
  | boolean OR boolean				{Or($1, $3)}
  | boolean DOR boolean				{DOr($1, $3)}
  | NOT boolean						{Not($2)}
  | expression EQUAL expression		{Equal($1, $3)}
  | expression NOTEQUAL expression  {NotEqual($1, $3)}
  | expression GEQ expression		{Geq($1, $3)}
  | expression GT expression		{Gt($1, $3)}
  | expression LEQ expression		{Leq($1,$3)}
  | expression LT expression		{Lt($1,$3)}



// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
